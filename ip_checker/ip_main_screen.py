import aiohttp
from textual.app import ComposeResult
from textual.screen import Screen
from textual.widgets import Header, Footer, Button, Static, Label, LoadingIndicator
from textual.containers import Center, Vertical, Horizontal
from .add_note_screen import AddNoteScreen
from .view_note_screen import ViewNoteScreen
import ipaddress
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class IPMainScreen(Screen):
    CSS = """
    #ip-label {
        text-align: center;
        margin: 1 0;
        color: $accent;
        text-style: bold;
        border: green;
    }
    
    #status {
        text-align: center;
        margin: 1 0 2 0;
        min-height: 3;
        color: $text;
    }
    
    .buttons-container {
        align: center middle;
        width: auto;
        height: auto;
        margin: 1 0;
    }
    
    Button {
        width: 24;
        margin: 0 1 1 0;
    }
    
    Button.primary {
        background: $primary;
        color: auto;
    }
    
    Button.success {
        background: $success;
        color: auto;
    }
    
    Button.secondary {
        background: $secondary;
        color: auto;
    }
    
    .hidden {
        display: none;
    }
    
    .loading-container {
        align: center middle;
        height: 3;
    }
    
    .timestamp {
        text-align: center;
        margin-top: 1;
        color: $text-muted;
    }
    """

    def compose(self) -> ComposeResult:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —ç–∫—Ä–∞–Ω–∞."""
        yield Header()
        yield Center(
            Label("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ IP-–∞–¥—Ä–µ—Å–∞...", id="ip-label")
        )
        yield Center(
            Label("", id="status")
        )
        with Center(classes="loading-container"):
            yield LoadingIndicator(id="loading")
        
        with Center():
            with Vertical(classes="buttons-container"):
                yield Button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å –∑–∞–º–µ—Ç–∫–æ–π", 
                            id="save-note", 
                            classes="primary hidden")
                yield Button("üìù –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–º–µ—Ç–∫—É", 
                            id="view-note", 
                            classes="success hidden")
                yield Button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å IP", 
                            id="refresh", 
                            classes="secondary")
        
        yield Footer()

    async def on_mount(self) -> None:
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —ç–∫—Ä–∞–Ω–∞."""
        await self.fetch_and_check_ip()

    async def fetch_and_check_ip(self):
        """–ü–æ–ª—É—á–∞–µ—Ç IP-–∞–¥—Ä–µ—Å –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        ip_label = self.query_one("#ip-label")
        status = self.query_one("#status")
        save_button = self.query_one("#save-note")
        view_button = self.query_one("#view-note")
        loading = self.query_one("#loading")

        try:
            # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            ip_label.update("‚åõ –ü–æ–ª—É—á–∞–µ–º –≤–∞—à IP-–∞–¥—Ä–µ—Å...")
            status.update("")
            loading.display = True

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            async with aiohttp.ClientSession() as session:
                async with session.get("https://api.ipify.org", timeout=5) as response:
                    response.raise_for_status()
                    ip = await response.text()

            # –í–∞–ª–∏–¥–∞—Ü–∏—è IP-–∞–¥—Ä–µ—Å–∞
            try:
                ipaddress.ip_address(ip)
            except ValueError:
                raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π IP-–∞–¥—Ä–µ—Å")

            ip_label.update(f"IP: [bold]{ip}[/]")
            self.app.ip_address = ip

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ IP –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            result = self.app.db.check_ip(ip)
            if result:
                note, created_at = result
                status.update(f"‚úÖ –≠—Ç–æ—Ç IP —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ\n[dim]–ó–∞–º–µ—Ç–∫–∞: {note}[/]\n[dim]–î–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {created_at}[/]")
                save_button.add_class("hidden")
                view_button.remove_class("hidden")
            else:
                status.update("‚ÄºÔ∏è –≠—Ç–æ—Ç IP –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
                save_button.remove_class("hidden")
                view_button.add_class("hidden")
        except aiohttp.ClientError as e:
            status.update(f"‚ö†Ô∏è [bold]–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞:[/] {str(e)}")
            logger.error(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ IP: {str(e)}")
        except ValueError as e:
            status.update(f"‚ö†Ô∏è [bold]–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:[/] {str(e)}")
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ IP: {str(e)}")
        except Exception as e:
            status.update(f"‚õî [bold]–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:[/] {str(e)}")
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        finally:
            # –°–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            loading.display = False

    def on_button_pressed(self, event: Button.Pressed) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫."""
        if event.button.id == "save-note":
            self.app.push_screen(AddNoteScreen())
        elif event.button.id == "view-note":
            self.app.push_screen(ViewNoteScreen())
        elif event.button.id == "refresh":
            self.app.call_later(self.fetch_and_check_ip)
